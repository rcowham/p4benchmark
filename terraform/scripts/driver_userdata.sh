#!/bin/bash

set -eux -o pipefail

trap 'catch $? $LINENO' ERR

catch() {
    echo ""
    echo "ERROR CAUGHT!"
    echo ""
    echo "Error code $1 occurred on line $2"
    echo ""
    
    exit $1
}

echo "${ssh_public_key}" > /ssh_public_key
echo "${ssh_private_key}" > /ssh_private_key
chmod 600 /ssh_private_key

eval `ssh-agent -s`
ssh-add /ssh_private_key

export PATH="$PATH:/usr/local/bin"

cat << EOF >> /root/.bashrc

# adding this into .bash_profile so an interactive ssh session also has ssh-agent
eval \`ssh-agent -s\`
ssh-add /ssh_private_key

export PATH="\$PATH:/usr/local/bin"
export ANSIBLE_HOSTS="hosts.yaml"

export P4USER="${helix_core_commit_benchmark_username}"
export P4PORT="ssl:${helix_core_private_ip}:${helix_core_port}"
export P4TRUST=/root/.p4trust
export P4TICKETS=/root/.p4tickets
EOF

cat << EOF > /etc/yum.repos.d/perforce.repo
[Perforce]
name=Perforce
baseurl=https://package.perforce.com/yum/rhel/8/x86_64
enabled=1
gpgcheck=1
EOF

rpm --import https://package.perforce.com/perforce.pubkey

yum group install -y "Development Tools"  --nogpgcheck
yum install -y helix-p4d epel-release sqlite wget jq vim net-tools perl nmap-ncat python38 python38-devel python3-pip perforce-p4python3-python3.8
# 11/15/2022 - "yum install -y ansible" stopped working with the following error:
# nothing provides (ansible-core >= 2.12.2 with ansible-core < 2.13) needed by ansible-5.4.0-3.el8.noarch
# switching over to installing via pip
yum remove -y python36 python39

wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
chmod +x /usr/local/bin/yq

echo /usr/local/lib>> /etc/ld.so.conf
echo /usr/lib64>> /etc/ld.so.conf

cd /
git clone https://github.com/${git_owner}/${git_project}.git
cd ${git_project}/
git checkout ${git_branch}

cd locust_files
pip3 install -r requirements.txt

pip3 install 'ansible==4.10.0'

cd /p4benchmark
chown root:rocky /p4benchmark
chmod g+w /p4benchmark

cat << EOF > /${p4benchmark_dir}/hosts.yaml

# Ansible hosts file in YAML format
# hosts.yaml - Ansible hosts file generated by terraform code in p4benchmark project

all:
    vars:
        # OS User account to execute commands
        remote_user: ${p4benchmark_os_user}
        # The directory to which benchmark scripts are copied on client machines, and where run from
        bench_dir: ${p4benchmark_dir}
        # The common directory on client machines in which workspaces are run
        workspace_common_dir: ${locust_workspace_dir}
        # The p4user account used for running client programs (and which owns client workspaces/changelists etc)
        p4bench_client_user: ${helix_core_commit_benchmark_username}
        # The p4user account used for setting up repository - must be different to the _client_user
        p4bench_setup_user: ${helix_core_commit_username}
        # The perforce SDP instance
        sdp_instance: 1
        # The port to use
        p4port: ${helix_core_port}
        # Number of workers per bench_client
        num_workers: ${number_locust_workers}
        # Avoid SSH connections between the driver and the commit machines
        avoid_ssh_connection: ${avoid_ssh_connection}

        # Perforce benchmark testing parameters
        # Specify password if required
        perforce:
            # Array of ports - can include ssl prefix. Allows for random selection of commit/edge servers
            port:
            - ssl:${helix_core_private_ip}:${helix_core_port}
            user:       ${helix_core_commit_benchmark_username}
            charset:
            password:   ${helix_core_password}
            options:  noallwrite noclobber nocompress unlocked nomodtime rmdir
            sync_progress_size_interval: 100 * 1000 * 1000
            # repoPath: should not include trailing /...
            #   If it includes "*" will be used as base for selection after running "p4 dirs" on it
            repoPath:   ${locust_repo_path}
            # repoDirNum: (numeric) Number of entries to randomly select from the above "p4 dirs" output if relevant
            repoDirNum: ${locust_repo_dir_num}
            # How many times to repeat the loop
            repeat: ${locust_repeat}
            # sync_args: any extra sync arguments. This will result in the spawning of a "p4" command
            # Example to avoid actually writing files to filesystem on client side:
            #sync_args: -vfilesys.client.nullsync=1
            # Any other -v or similar options possible.
            # Note that the following commands will be passed automatically: -p/-u/-c

        # This section is mainly for the locust scripts more than the yaml files
        general:
            min_wait: 100
            max_wait: 100
            workspace_root:  ${locust_workspace_dir}



    children:
        bench_servers:
            hosts:
                ${helix_core_private_ip}:
        bench_clients:
            hosts:
%{ for ip in locust_client_ips ~}
                ${ip}:
%{ endfor ~}

EOF



if [[ "${install_p4prometheus}" == "true" ]]; then
    echo "Installation of p4prometheus is included"

    cd /tmp/
    wget https://raw.githubusercontent.com/perforce/p4prometheus/master/scripts/install_prom_graf.sh
    chmod +x install_prom_graf.sh
    ./install_prom_graf.sh

cat << EOF > /etc/prometheus/prometheus.yml
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration - optional
# alerting:
#   alertmanagers:
#   - static_configs:
#     - targets:
#         - localhost:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
# rule_files:
  # - "perforce_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  - job_name: 'prometheus'
    static_configs:
    - targets: ['localhost:9090']

  - job_name: 'node_exporter'
    static_configs:
    ############################################################
    # CONFIGURE THESE VALUES AS APPROPRIATE FOR YOUR SERVERS!!!!
    ############################################################
    - targets: 
        - ${helix_core_private_ip}:9100

EOF

    export GRAFANA_SERVER=http://localhost:3000
    export GRAFANA_API_KEY=$(curl -X POST -H "Content-Type: application/json" -d '{"name":"apikeycurl", "role": "Admin"}' http://admin:admin@localhost:3000/api/auth/keys | jq -r -c '.key')

    wget https://raw.githubusercontent.com/perforce/p4prometheus/master/scripts/upload_grafana_dashboard.sh
    chmod +x upload_grafana_dashboard.sh
    wget https://raw.githubusercontent.com/perforce/p4prometheus/master/scripts/create_dashboard.py
    chmod +x create_dashboard.py
    wget https://raw.githubusercontent.com/perforce/p4prometheus/master/scripts/dashboard.yaml
    pip3 install grafanalib requests
    pip3 install --ignore-installed PyYAML

    ./create_dashboard.py --title "P4Prometheus" --url $GRAFANA_SERVER --api-key $GRAFANA_API_KEY

    wget -O node-exporter-server-metrics_rev8.json https://grafana.com/api/dashboards/405/revisions/8/download
    wget -O node-exporter-full_rev28.json https://grafana.com/api/dashboards/1860/revisions/28/download

    jq '{"dashboard": .}' <node-exporter-server-metrics_rev8.json >node-exporter-server-metrics_rev8fff-updated.json
    jq '{"dashboard": .}' <node-exporter-full_rev28.json >node-exporter-full_rev28-updated.json
    
    # TODO: these are not working.  curl gets {"message":"bad request data","traceID":""} back from grafana
    ./upload_grafana_dashboard.sh node-exporter-server-metrics_rev8-updated.json
    ./upload_grafana_dashboard.sh node-exporter-full_rev28-updated.json

fi

mkdir /root/bin/
cd /root/bin/
wget -q https://github.com/rcowham/go-libp4dlog/releases/download/v0.10.1/log2sql-linux-amd64.gz
gunzip log2sql-linux-amd64.gz
mv log2sql-linux-amd64 log2sql
chmod +x log2sql

export P4PORT="ssl:${helix_core_private_ip}:${helix_core_port}"
export P4TRUST=/root/.p4trust
export P4TICKETS=/root/.p4tickets
export P4USER="${helix_core_commit_username}"

p4 trust -y
echo ${helix_core_password} | p4 login

cat <<EOT > /tmp/${helix_core_commit_benchmark_username}.cfg
User:  ${helix_core_commit_benchmark_username}

Email:${helix_core_commit_benchmark_username}@perforce.com

FullName:   ${helix_core_commit_benchmark_username}
EOT
cat /tmp/${helix_core_commit_benchmark_username}.cfg | p4 user -i -f 

cat <<EOT > /tmp/password_reset
${helix_core_password}
${helix_core_password}
EOT

cat /tmp/password_reset | p4 passwd ${helix_core_commit_benchmark_username}

export P4USER="${helix_core_commit_benchmark_username}"

cat /tmp/password_reset | p4 login 

